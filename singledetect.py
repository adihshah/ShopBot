'''# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wAEjFeHTl_wjjrbqargq3TafZBJN9uKg
"""

# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

!ls "/content/drive/My Drive"'''

# Imports
import glob
import numpy as np
import os.path as path
import os
import time
from scipy import misc
import cv2
import matplotlib.pyplot as plt
import tensorflow as tf
#import h5py
from tensorflow.keras.initializers import glorot_uniform
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D
from tensorflow.keras.callbacks import EarlyStopping, TensorBoard
from tensorflow.keras.models import model_from_json
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.utils import CustomObjectScope

from sklearn.metrics import accuracy_score, f1_score
from datetime import datetime

def main(params):
    print("Imports work")
    
    def cnn(size, n_layers):
    # INPUTS
    # size     - size of the input images
    # n_layers - number of layers
    # OUTPUTS
    # model    - compiled CNN

    # Define hyperparamters
        MIN_NEURONS = 20
        MAX_NEURONS = 120
        KERNEL = (3, 3)

    # Determine the # of neurons in each convolutional layer
        steps = np.floor(MAX_NEURONS / (n_layers + 1))
        nuerons = np.arange(MIN_NEURONS, MAX_NEURONS, steps)
        nuerons = nuerons.astype(np.int32)

    # Define a model
        model = Sequential()

    # Add convolutional layers
        for i in range(0, n_layers):
            if i == 0:
                shape = (size[0], size[1], size[2])
            
                model.add(Conv2D(nuerons[i], KERNEL, input_shape=shape))
            else:
                model.add(Conv2D(nuerons[i], KERNEL))

            model.add(Activation('relu'))
        print("Middle of cnn")
    # Add max pooling layer
        model.add(MaxPooling2D(pool_size=(2, 2)))
        model.add(Flatten())
        model.add(Dense(MAX_NEURONS))
        model.add(Activation('relu'))

    # Add output layer
        model.add(Dense(1))
        model.add(Activation('sigmoid'))

    # Compile the model
        model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    # Print a summary of the model
    #model.summary()

        return model

    #N_LAYERS = 4
    #image_size = (128,128,3)
    #image_size = np.asarray([images.shape[1], images.shape[2], images.shape[3]])
    #model = cnn(size=image_size, n_layers=N_LAYERS)
    print("In main program")
    model = tf.keras.models.load_model('./image/Neural_Network.h5')
    print("Created model")
    #model = load_model('/Users/adityashah/Desktop/Neural_Network.h5',custom_objects={'GlorotUniform': glorot_uniform()})
    #with CustomObjectScope({'GlorotUniform': glorot_uniform()}):
    #    model = tf.keras.models.load_model('/Users/adityashah/Desktop/Neural_Network.h5')
    #model = tf.keras.models.load_model('/Users/adityashah/Desktop/Neural_Network.h5')
    #model.load_weights("/myvol/weights/cp128.ckpt")
    #print("Loaded model")
    image_test = np.array([cv2.imread("./image/1_test5.jpg")])

    print("Image Shape is :" + str(image_test.shape))
    test_predictions = model.predict(image_test)
    if test_predictions[0] == 1.0:
      print("Predicted Banana")
    else:
      print("Predicted Not Banana")

    return {"Result":"Sucess"}

main({})
